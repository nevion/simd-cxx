{"tagline":"The Simple DDS API for C++ ","body":"# simd-cxx. simple. elegant. efficient.\r\nsimd-cxx v1.0 is an implementation of the latest C++ API for DDS as specified by the OMG DDS-PSM-C++ standard. This standard heavily drew concepts and inspiration from simd-cxx v0.x as well as from other experimental DDS APIs such as [escalier](http://github.com/kydos/escalier). \r\n\r\nThe result is a simple, elegant and efficient API that I am sure you will enjoy. To wet your appetite, let's see how you might write a simple twitter application with the new API. \r\n\r\nLet's start by defining our Twit topic type:\r\n\r\n```c++\r\nstruct Twit_t {\r\n     string userid;\r\n     string msg;\r\n };\r\n #pragma keylist Twit userid\r\n```\r\n\r\nLet's write now the fragment of the application to post Twits:\r\n\r\n```c++\r\n// Create a domain participant to join the proper DDS domain\r\nDomainParticipant dp(twitterID);\r\n// Create a publisher in the given domain\r\nPublisher pub(dp);\r\n// Create a Twit topic in the domain\r\nTopic<Twit_t> twit(dp, \"Twit\");\r\n// Create a Twit DataWriter\r\nDataWriter<Twit_t> dw(pub, twit);\r\n// Twit...\r\ndw << Twit(\"acorsaro\", \"Have fun with #simd-cxx !\");\r\n```\r\n\r\nThe fragment of the application to read Twits is pretty similar:\r\n\r\n```c++\r\n// Create a domain participant to join the proper DDS domain\r\nDomainParticipant dp(twitterID);\r\n// Create a publisher in the given domain\r\nSubscriber sub(dp);\r\n// Create a Twit topic in the domain\r\nTopic<Twit_t> twit(dp, \"Twit\");\r\n// Create a Twit DataWriter\r\nDataReader<Twit_t> dr(sub, twit);\r\n// Read Twits\r\nLoanedSamples<Twit_t> samples = dr.read();\r\n// Iterate over the read samples and print the latest twits.\r\nfor_each(samples.begin(), samples.end(), printTwit);\r\n```\r\n\r\nGood Hacking with simd-cxx!\r\n","note":"Don't delete this file! It's used internally to help with page regeneration.","google":"","name":"simd-cxx"}